// Code generated by MockGen. DO NOT EDIT.
// Source: ../mail.go

// Package mockmailz is a generated GoMock package.
package mockmailz

import (
	context "context"
	reflect "reflect"

	sesv2 "github.com/aws/aws-sdk-go-v2/service/sesv2"
	gomock "github.com/golang/mock/gomock"
	mailz "github.com/ibrt/golang-inject-mail/mailz"
	mail "gopkg.in/mail.v2"
)

// MockMail is a mock of Mail interface.
type MockMail struct {
	ctrl     *gomock.Controller
	recorder *MockMailMockRecorder
}

// MockMailMockRecorder is the mock recorder for MockMail.
type MockMailMockRecorder struct {
	mock *MockMail
}

// NewMockMail creates a new mock instance.
func NewMockMail(ctrl *gomock.Controller) *MockMail {
	mock := &MockMail{ctrl: ctrl}
	mock.recorder = &MockMailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMail) EXPECT() *MockMailMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMail) Send(ctx context.Context, message *mailz.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailMockRecorder) Send(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMail)(nil).Send), ctx, message)
}

// MockSMTPSender is a mock of SMTPSender interface.
type MockSMTPSender struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPSenderMockRecorder
}

// MockSMTPSenderMockRecorder is the mock recorder for MockSMTPSender.
type MockSMTPSenderMockRecorder struct {
	mock *MockSMTPSender
}

// NewMockSMTPSender creates a new mock instance.
func NewMockSMTPSender(ctrl *gomock.Controller) *MockSMTPSender {
	mock := &MockSMTPSender{ctrl: ctrl}
	mock.recorder = &MockSMTPSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPSender) EXPECT() *MockSMTPSenderMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m_2 *MockSMTPSender) DialAndSend(m ...*mail.Message) error {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockSMTPSenderMockRecorder) DialAndSend(m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockSMTPSender)(nil).DialAndSend), m...)
}

// MockSESSender is a mock of SESSender interface.
type MockSESSender struct {
	ctrl     *gomock.Controller
	recorder *MockSESSenderMockRecorder
}

// MockSESSenderMockRecorder is the mock recorder for MockSESSender.
type MockSESSenderMockRecorder struct {
	mock *MockSESSender
}

// NewMockSESSender creates a new mock instance.
func NewMockSESSender(ctrl *gomock.Controller) *MockSESSender {
	mock := &MockSESSender{ctrl: ctrl}
	mock.recorder = &MockSESSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSESSender) EXPECT() *MockSESSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSESSender) SendEmail(ctx context.Context, params *sesv2.SendEmailInput, optFns ...func(*sesv2.Options)) (*sesv2.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*sesv2.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSESSenderMockRecorder) SendEmail(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSESSender)(nil).SendEmail), varargs...)
}

// MockContextMail is a mock of ContextMail interface.
type MockContextMail struct {
	ctrl     *gomock.Controller
	recorder *MockContextMailMockRecorder
}

// MockContextMailMockRecorder is the mock recorder for MockContextMail.
type MockContextMailMockRecorder struct {
	mock *MockContextMail
}

// NewMockContextMail creates a new mock instance.
func NewMockContextMail(ctrl *gomock.Controller) *MockContextMail {
	mock := &MockContextMail{ctrl: ctrl}
	mock.recorder = &MockContextMailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextMail) EXPECT() *MockContextMailMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockContextMail) Send(message *mailz.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockContextMailMockRecorder) Send(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockContextMail)(nil).Send), message)
}
